// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String    @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    Project                  Project[]

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Project       Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id                       String                    @id @default(cuid())
    name                     String
    description              String
    userId                   String
    backgroundUrl            String
    createdAt                DateTime                  @default(now())
    updatedAt                DateTime                  @updatedAt
    accountId                String?
    user                     User                      @relation(fields: [userId], references: [id])
    Account                  Account?                  @relation(fields: [accountId], references: [id])
    ProjectApiKeys           ProjectApiKeys[]
    ErrorLogs                ErrorLogs[]
    ClientAccessTokens       ClientAccessTokens[]
    ClientAccessTokenSecrets ClientAccessTokenSecrets?
    ProjectSecrets           ProjectSecrets?
}

model ProjectSecrets {
    id            String   @id @default(cuid())
    projectSecret String   @unique
    projectId     String   @unique
    createdAt     DateTime @default(now())

    Project Project @relation(fields: [projectId], references: [id])
}

model ClientAccessTokenSecrets {
    id                String   @id @default(cuid())
    accessTokenSecret String   @unique
    projectId         String   @unique
    createdAt         DateTime @default(now())

    project            Project              @relation(fields: [projectId], references: [id])
    ClientAccessTokens ClientAccessTokens[]
}

model ProjectApiKeys {
    id           String   @id @default(cuid())
    name         String
    projectId    String
    hashedSecret String   @unique()
    createdAt    DateTime @default(now())
    project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ClientAccessTokens {
    id                        String                   @id @default(cuid())
    createdAt                 DateTime                 @default(now())
    token                     String                   @unique
    projectId                 String
    clientAccessTokenSecretId String
    project                   Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    clientAccessTokenSecret   ClientAccessTokenSecrets @relation(fields: [clientAccessTokenSecretId], references: [id])
}

model ErrorLogs {
    id        String   @id @default(cuid())
    projectId String
    location  String
    host      String
    cookies   String
    origin    String
    source    String?
    lineNo    String?
    colNo     String?
    message   String?
    stack     String?
    project   Project  @relation(fields: [projectId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
