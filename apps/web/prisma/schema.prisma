// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String    @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    Project                  Project[]

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Project       Project[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id             String           @id @default(cuid())
    name           String
    description    String
    userId         String
    backgroundUrl  String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    accountId      String?
    user           User             @relation(fields: [userId], references: [id])
    Account        Account?         @relation(fields: [accountId], references: [id])
    ProjectApiKeys ProjectApiKeys[]
    ErrorLogs      ErrorLogs[]
    ProjectSecrets ProjectSecrets?
}

model ProjectSecrets {
    id            String   @id @default(cuid())
    projectSecret String   @unique
    projectId     String   @unique
    createdAt     DateTime @default(now())

    Project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
    ProjectApiKeys ProjectApiKeys[]
}

model ProjectApiKeys {
    id              String         @id @default(cuid())
    name            String
    projectId       String
    hashedSecret    String         @unique()
    projectSecretId String
    createdAt       DateTime       @default(now())
    project         Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectSecret   ProjectSecrets @relation(fields: [projectSecretId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ErrorLogs {
    id        String   @id @default(cuid())
    projectId String
    userAgent String
    host      String
    origin    String
    source    String?
    lineNo    Int?
    colNo     Int?
    message   String?
    stack     String?
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
